import yaml, time

def load_config(file_path):
    with open(file_path, 'r') as file:
        configs = list(yaml.safe_load_all(file))
    return configs
debug = True

def process_config(configs, writeFirmwareConfig=False):
    file_handle = None
    if(writeFirmwareConfig):
        file_handle = open('firmware2.h', 'w')
        current_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
        file_handle.write(f"//This file is generated automaticly by arduino-connector.py at :{current_time}\n")
        file_handle.write("//Do not edit this file to keep it in sync\n")
        file_handle.write("\n")
            
    for i,config in enumerate(configs):
        mcu = config.get('mcu', {})
        alias = mcu.get('alias', f'MCU-{i}')
        if(writeFirmwareConfig):
            file_handle.write(f'//IO Settings of mcu no {i}\n')
            file_handle.write("\n")
        component_name = mcu.get('component_name', 'arducon')
        dev = mcu.get('dev', 'Unknown')
        debug = mcu.get('debug', False)
        enabled = mcu.get('enabled', True)
        connection_type = mcu.get('connection_type', 'serial')
        connection_baudrate = mcu.get('connection_baudrate', 115200)
        connection_timeout = mcu.get('connection_timeout', 5000)

        if debug == True:
            
            print(f"MCU Alias: {alias}")
            print(f"Component Name: {component_name}")
            print(f"Device: {dev}")
            print(f"Enabled: {enabled}")
            print(f"Connection Type: {connection_type}")
            print(f"Connection Baudrate: {connection_baudrate}")
            print("IO Map:")

        io_map = mcu.get('io_map', {})

        
        analog_inputs = io_map.get('analogInputs', [])
        pwm_outputs = io_map.get('pwmOutputs', [])
        digital_inputs = io_map.get('digitalInputs', [])
        digital_outputs = io_map.get('digitalOutputs', [])
        lPoti = io_map.get('lPoti', [])
        binarySelectorSwitch = io_map.get('binarySelectorSwitch', [])
        quadratureEncoder = io_map.get('quadratureEncoder', [])
        joystick = io_map.get('joystick', [])
        statusled = io_map.get('statusled', [])
        digitalLed = io_map.get('digitalLed', [])
        matrixKeyboard = io_map.get('matrixKeyboard', [])
        LEDmultiplexing = io_map.get('LEDmultiplexing', [])
        dallasThermistor = io_map.get('dallasThermistor', [])
        rcServo = io_map.get('rcServo', [])
        Stepper = io_map.get('Stepper', [])


        ### Analog Inputs
        if analog_inputs:
            if debug == True:
                print("Analog Inputs:")
            AInputs = (len(analog_inputs))
            if AInputs > 0:
                if writeFirmwareConfig == True:
                    file_handle.write(f'//Analog Inputs\n')
                    file_handle.write(f'#define AINPUTS\n')
                    file_handle.write(f'#define ANALOG_INPUTS {AInputs}\n')
            
                AInPinmap = []
                AInPinNames = []
                AInPinSmoothings = []
                AInPinMinValues = []
                AInPinMaxValues = []

                


            for pin in analog_inputs:
                if pin.get('pin_enabled', True):
                    AInPinmap.append(pin.get('pin_id', pin))
                    AInPinNames.append(pin.get('pin_name', f"ain-{pin}"))
                    AInPinSmoothings.append(pin.get('pin_smoothing', 200))
                    AInPinMinValues.append(pin.get('pin_min_val', 0))
                    AInPinMaxValues.append(pin.get('pin_max_val', 255))

                if debug == True:
                    print(AInPinmap[-1])
                    print(AInPinNames[-1])
                    print(AInPinSmoothings[-1])
                    print(AInPinMinValues[-1])
                    print(AInPinMaxValues[-1])

            if writeFirmwareConfig == True:
                file_handle.write(f'    const int AInPinmap[] = {{{",".join(map(str, AInPinmap))}}};\n')
                file_handle.write(f'    const int AInPinSmoothing[] = {{{",".join(map(str, AInPinSmoothings))}}};\n')
                file_handle.write(f'\n')

        ### PWM Outputs
        if pwm_outputs:
            if debug == True:
                print("PWM Outputs:")
            PWMs = (len(pwm_outputs))
            if PWMs > 0:
                if writeFirmwareConfig == True:
                    file_handle.write(f'//PWM Outputs\n')
                    file_handle.write(f'#define PWMOUTPUTS\n')
                    file_handle.write(f'#define PwmOutputs {PWMs}\n')
            
                PWMPinmap = []
                PWMPinNames = []
                PWMPinInit = []
                PWMPinModes = []
                PWMPin_on_values = []
                PWMPin_off_values = []

                

            for pin in pwm_outputs:
                if pin.get('pin_enabled', True):
                    PWMPinmap.append(pin.get('pin_id', pin))
                    PWMPinNames.append(pin.get('pin_name', f"pwm-{pin}"))
                    PWMPinInit.append(pin.get('pin_init_state', 0))
                    PWMPinModes.append(pin.get('pin_mode', 0))
                    PWMPin_on_values.append(pin.get('pin_on_value', 255))
                    PWMPin_off_values.append(pin.get('pin_off_value', 0))

                    if debug == True:
                        print(PWMPinmap[-1])
                        print(PWMPinNames[-1])
                        print(PWMPinInit[-1])
                        print(PWMPinModes[-1])
                        print(PWMPin_on_values[-1])
                        print(PWMPin_off_values[-1])
                    
            if writeFirmwareConfig == True:
                file_handle.write(f'    const int PWMPinmap[] = {{{",".join(map(str, PWMPinmap))}}};\n')
                file_handle.write(f'    const int PWMPinInit[] = {{{",".join(map(str, PWMPinInit))}}};\n')
                file_handle.write(f'\n')

        ### Digital Inputs
        if digital_inputs:
            if debug == True:
                print("Digital Inputs:")
            DInputs = (len(digital_inputs))
            if DInputs > 0:
                if writeFirmwareConfig == True:
                    file_handle.write(f'//Digital Inputs\n')
                    file_handle.write(f'#define DINPUTS\n')
                    file_handle.write(f'#define DigitalInputs {DInputs}\n')
            
                DInPinmap = []
                DInPinNames = []
                DInPinModes = []
                DInPinDebounce = []
                DInPinPullups = []
                DInPinInverteds = []

                

            for pin in digital_inputs:
                if pin.get('pin_enabled', True):
                    DInPinmap.append(pin.get('pin_id', pin))
                    DInPinNames.append(pin.get('pin_name', f"din-{pin}"))
                    DInPinModes.append(pin.get('pin_mode', 0))
                    DInPinDebounce.append(pin.get('pin_debounce', 20))
                    DInPinPullups.append(pin.get('pin_pullup', 1))
                    DInPinInverteds.append(pin.get('pin_inverted', 0))

                    if debug == True:
                        print(DInPinmap[-1])
                        print(DInPinNames[-1])
                        print(DInPinModes[-1])
                        print(DInPinDebounce[-1])
                        print(DInPinPullups[-1])
                        print(DInPinInverteds[-1])
                    
            if writeFirmwareConfig == True:
                file_handle.write(f'    const int DInPinmap[] = {{{",".join(map(str, DInPinmap))}}};\n')
                file_handle.write(f'    const int DInPinModes[] = {{{",".join(map(str, DInPinModes))}}};\n')
                file_handle.write(f'    const int DInPinDebounce[] = {{{",".join(map(str, DInPinDebounce))}}};\n')
                file_handle.write(f'    const int DInPinPullups[] = {{{",".join(map(str, DInPinPullups))}}};\n')

                file_handle.write(f'\n')
        
        ### Digital Outputs
        if digital_outputs:
            if debug == True:
                print("Digital Outputs:")
            DOutputs = (len(digital_outputs))
            if DOutputs > 0:
                if writeFirmwareConfig == True:
                    file_handle.write(f'//Digital Outputs\n')
                    file_handle.write(f'#define DOUTPUTS\n')
                    file_handle.write(f'#define DigitalOutputs {DOutputs}\n')
            
                DOutPinmap = []
                DOutPinNames = []
                DOutPinTypes = []
                DOutPinInit = []
                DOutPinDisconnected_states = []
                DOutPinConnected_states = []



            for pin in digital_outputs:
                if pin.get('pin_enabled', True):
                    DOutPinmap.append(pin.get('pin_id', pin))
                    DOutPinNames.append(pin.get('pin_name', f"dout-{pin}"))
                    DOutPinInit.append(pin.get('pin_init_state', 0))
                    DOutPinTypes.append(pin.get('pin_type', 0))
                    DOutPinDisconnected_states.append(pin.get('pin_on_disconnected', -1))
                    DOutPinConnected_states.append(pin.get('pin_on_connected', -1))           

                    
                if debug == True:
                    print(DOutPinmap[-1])
                    print(DOutPinNames[-1])
                    print(DOutPinTypes[-1])
                    print(DOutPinInit[-1])
                    print(DOutPinDisconnected_states[-1])
                    print(DOutPinConnected_states[-1])         
                    
            if writeFirmwareConfig == True:
                file_handle.write(f'    const int DOutPinmap[] = {{{",".join(map(str, DOutPinmap))}}};\n')
                file_handle.write(f'    const int DOutPinInit[] = {{{",".join(map(str, DOutPinInit))}}};\n')
                file_handle.write(f'    const int DOutPinDisconnect[] = {{{",".join(map(str, DOutPinDisconnected_states))}}};\n')
                file_handle.write(f'    const int DOutPinConnect[] = {{{",".join(map(str, DOutPinConnected_states))}}};\n') 
                file_handle.write(f'\n')

        ### Linear Potentiometer
        if lPoti:
            if debug == True:
                print("Latching Potentiometer:")
            LPotis = (len(lPoti))
            if LPotis > 0:
                if writeFirmwareConfig == True:
                    file_handle.write(f'//Linear Poti\n')
                    file_handle.write(f'#define LPOTI\n')
                    file_handle.write(f'#define LinearPotis {LPotis}\n')
            
                LPotiPinmap = []
                LPotiPinNames = []
                LPotiPinLatches = []
                LPotiPinTypes = []
                LPotiPinValues = []
                LPotiPinMargins = []
                LPotiPinModes = []




            for pin in lPoti:
                if pin.get('pin_enabled', True):
                    LPotiPinmap.append(pin.get('pin_id', pin))
                    LPotiPinNames.append(pin.get('pin_name', f"lpoti-{pin}"))
                    LPotiPinLatches.append(pin.get('pin_latch', 0))	
                    LPotiPinTypes.append(pin.get('pin_type', 0))
                    LPotiPinValues.append(pin.get('value_replace', 0))
                    LPotiPinMargins.append(pin.get('pin_margin', 20))
                    LPotiPinModes.append(pin.get('pin_mode', 0))

                
                    if debug == True:
                        print(LPotiPinmap[-1])
                        print(LPotiPinNames[-1])
                        print(LPotiPinLatches[-1])
                        print(LPotiPinTypes[-1])
                        print(LPotiPinValues[-1])
                        print(LPotiPinMargins[-1])
                        print(LPotiPinModes[-1])
                    
            if writeFirmwareConfig == True:
                file_handle.write(f'    const int LPotiPinmap[] = {{{",".join(map(str, LPotiPinmap))}}};\n')
                file_handle.write(f'    const int LPotiPinLatches[] = {{{",".join(map(str, LPotiPinLatches))}}};\n')
                file_handle.write(f'    const int LPotiPinMargins[] = {{{",".join(map(str, LPotiPinMargins))}}};\n')
            
                
                file_handle.write(f'\n')

        ### Binary Selector Switch
        if binarySelectorSwitch:
            if debug == True:
                print("Binary Selector Switch:")
            BSS = (len(binarySelectorSwitch))
            if BSS > 0:
                if writeFirmwareConfig == True:
                    file_handle.write(f'//Binary Selector Switch\n')
                    file_handle.write(f'#define BINSEL\n')
                    file_handle.write(f'#define BinarySelectorSwitches {BSS}\n')
            
                BSSPinmap = []
                BSSPinNames = []
                BSSPinPins = []
                BSSPinTypes = []
                BSSPinValues = []


            for pin in binarySelectorSwitch:
                if pin.get('pin_enabled', True):
                    BSSPinmap.append(pin.get('pin_id', pin))
                    BSSPinNames.append(pin.get('pin_name', f"bss-{pin}"))
                    BSSPinPins.append(pin.get('pin_pins', 0))
                    BSSPinTypes.append(pin.get('pin_type', 0))
                    BSSPinValues.append(pin.get('pin_value', 0))
                    
            if writeFirmwareConfig == True:
                file_handle.write(f'    const int BSSPinmap[] = {{{",".join(map(str, BSSPinmap))}}};\n')

                formatted_values = ", ".join("{" + ",".join(map(str, sublist)) + "}" for sublist in BSSPinPins)
                file_handle.write(f'    const int BSSPinPins[][5] = {{{formatted_values}}};\n')

                file_handle.write(f'\n')


        ### Quadrature Encoder
        if quadratureEncoder:
            if debug == True:
                print("Quadrature Encoder:")
            QE = (len(quadratureEncoder))
            if QE > 0:
                if writeFirmwareConfig == True:
                    file_handle.write(f'//Quadrature Encoder\n')
                    file_handle.write(f'#define QUADENC\n')
                    file_handle.write(f'#define QuadratureEncoders {QE}\n')
            
                QEPinmap = []
                QEPinNames = []
                QEPinModes = []
                QEPinPins = []
                QEPin_steps = []
                QEPinvirtualpins = []
                QEPinVirtualStartPins = []
                QEPinTypes = []
                QEPinValues = []



            for pin in quadratureEncoder:
                if pin.get('pin_enabled', True):
                    QEPinmap.append(pin.get('pin_id', pin))
                    QEPinNames.append(pin.get('pin_name', f"quadEnc.{pin}"))
                    QEPinModes.append(pin.get('pin_mode', 0))
                    QEPinPins.append(pin.get('pin_pins', 0))
                    QEPin_steps.append(pin.get('pin_steps', 4))
                    QEPinvirtualpins.append(pin.get('pin_virtualpins', 0))
                    QEPinVirtualStartPins.append(pin.get('pin_virtualstartpins', 0))
                    QEPinTypes.append(pin.get('pin_type', 0))
                    QEPinValues.append(pin.get('pin_value', 0))

            if writeFirmwareConfig == True:
                file_handle.write(f'    const int QEPinmap[] = {{{",".join(map(str, QEPinmap))}}};\n')
                file_handle.write(f'    const int QEPinModes[] = {{{",".join(map(str, QEPinModes))}}};\n')
                file_handle.write(f'    const int QEPinPins[] = {{{",".join(map(str, QEPinPins))}}};\n')
                file_handle.write(f'    const int QEPinSteps[] = {{{",".join(map(str, QEPin_steps))}}};\n')
                file_handle.write(f'\n')

        ### Joystick
        if joystick:
            if debug == True:
                print("Joystick:")
            JS = (len(joystick))
            if JS > 0:
                if writeFirmwareConfig == True:
                    file_handle.write(f'//Joystick\n')
                    file_handle.write(f'#define JOYSTICK\n')
                    file_handle.write(f'#define Joysticks {JS}\n')
            
                JSPinmap = []
                JSPinNames = []
                JSPinCenter = []
                JSPinDeadbands = []
                JSPinScaling = []
                

            for pin in joystick:
                if pin.get('pin_enabled', True):
                    JSPinmap.append(pin.get('pin_id', pin))
                    JSPinNames.append(pin.get('pin_name', f"joystick-{pin}"))
                    JSPinCenter.append(pin.get('pin_center', 512))
                    JSPinDeadbands.append(pin.get('pin_deadband', 20))
                    JSPinScaling.append(pin.get('pin_scaling', 0.01))

                    if debug == True:
                        print(JSPinmap[-1])
                        print(JSPinNames[-1])
                        print(JSPinCenter[-1])
                        print(JSPinDeadbands[-1])
                        print(JSPinScaling[-1])

                if writeFirmwareConfig == True:
                    file_handle.write(f'    const int JSPinmap[] = {{{",".join(map(str, JSPinmap))}}};\n')
                    file_handle.write(f'    const int JSCenter[] = {{{",".join(map(str, JSPinCenter))}}};\n')
                    file_handle.write(f'    const int JSDeadbands[] = {{{",".join(map(str, JSPinDeadbands))}}};\n')
                    file_handle.write(f'    const float JSScaling[] = {{{",".join(map(str, JSPinScaling))}}};\n')
                    file_handle.write(f'\n')

            
        ### Status LED
        if statusled:
            if debug == True:
                print("Status LED:")
            SL = (len(statusled))
            if SL > 0:
                if writeFirmwareConfig == True:
                    file_handle.write(f'//Status LED\n')
                    file_handle.write(f'#define STATUSLED\n')

            for pin in statusled:
                StatusLed = pin.get('pin_id', 13)
                StatusLedDled = pin.get('useDled', 0)
                
                if debug == True:
                    print(StatusLed)
                    print(StatusLedDled)

                if writeFirmwareConfig == True:
                    file_handle.write(f'    const int StatusLed = {StatusLed};\n')
                    file_handle.write(f'      const int StatLedErrDel[] = {{1000,10}};   //Blink Timing for Status LED Error (no connection)\n')
                    file_handle.write(f'    const int DLEDSTATUSLED = {StatusLedDled};\n')
                    file_handle.write(f'\n')


        ### Digital LED
        if digitalLed:
            if debug == True:
                print("Digital LED:")
            DLed = (len(digitalLed))
            if DLed > 0:
                if writeFirmwareConfig == True:
                    file_handle.write(f'//Digital LED\n')
                    file_handle.write(f'#define DIGITALLEDS\n')
            
                
                DLedPinNames = []
                DLedPinInit = []
                DLedPinModes = []
                DLedPin_on_values = []
                DLedPin_off_values = []
                


            for pin in digitalLed:
                if pin.get('pin_enabled', True):
                    DLedPin = pin.get('pin_id', pin)
                    DLedCount = pin.get('dled_count', 10)
                    DLedPin_Fade = pin.get('pin_fade', 0)
                    DLedPinNames.append(pin.get('pin_name', f"dled-{pin}"))
                    DLedPinInit.append(pin.get('pin_init_state', 0))
                    DLedPinModes.append(pin.get('pin_mode', 0))
                    DLedPin_on_values.append(pin.get('pin_on_value', 255))
                    DLedPin_off_values.append(pin.get('pin_off_value', 0))

                    if debug == True:
                        print(DLedPin)
                        print(DLedCount)
                        print(DLedPinNames[-1])
                        print(DLedPinInit[-1])
                        print(DLedPinModes[-1])
                        print(DLedPin_on_values[-1])
                        print(DLedPin_off_values[-1])

            if writeFirmwareConfig == True:
                file_handle.write(f'    const int DLedPin = {DLedPin};\n')
                file_handle.write(f'    const int DLedCount = {DLedCount};\n')
                file_handle.write(f'    const int DLedPinInit[] = {{{",".join(map(str, DLedPinInit))}}};\n')
                file_handle.write(f'    const int DLedPinModes[] = {{{",".join(map(str, DLedPinModes))}}};\n')
                file_handle.write(f'    const int DLedPin_on_values[] = {{{",".join(map(str, DLedPin_on_values))}}};\n')
                file_handle.write(f'    const int DLedPin_off_values[] = {{{",".join(map(str, DLedPin_off_values))}}};\n')
                file_handle.write(f'    const int DLedPin_Fade = {DLedPin_Fade};\n')
                file_handle.write(f'\n')

        








    if file_handle:
        file_handle.close()

    


if __name__ == "__main__":
    config_path = "config.yaml"
    configs = load_config(config_path)
    print(configs)
    for config in configs:
        process_config(configs,1)