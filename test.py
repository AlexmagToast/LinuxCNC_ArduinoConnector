import yaml, time

def load_config(file_path):
    with open(file_path, 'r') as file:
        configs = list(yaml.safe_load_all(file))
    return configs
debug = True

def process_config(configs, writeFirmwareConfig=False):
    file_handle = None
    if(writeFirmwareConfig):
        file_handle = open('firmware2.h', 'w')
        current_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())

        file_handle.write(f"//This file is generated automaticly by arduino-connector.py at :{current_time}\n")
        file_handle.write("//Do not edit this file to keep it in sync\n")
        unix_timestamp = int(time.time())
        file_handle.write(f"//This Configuration has the ID {unix_timestamp}, it is used to detect Firmware Versions\n")
        file_handle.write(f"#define FIRMWAREID {unix_timestamp}\n")
        file_handle.write("\n")

    for i,config in enumerate(configs):
        mcu = config.get('mcu', {})
        alias = mcu.get('alias', f'MCU-{i}')

        component_name = mcu.get('component_name', 'arducon')
        dev = mcu.get('dev', 'Unknown')
        debug = mcu.get('debug', False)
        enabled = mcu.get('enabled', True)
        connection_type = mcu.get('connection_type', 'serial')
        connection_baudrate = mcu.get('connection_baudrate', 115200)
        connection_timeout = mcu.get('connection_timeout', 5000)
        if(writeFirmwareConfig):
            file_handle.write(f'//IO Settings of mcu no {i}\n//Alias :{alias}\n')
            file_handle.write("\n")
            file_handle.write(f'//Connection Settings\n')
            file_handle.write(f'#define CONNECTION_TYPE {connection_type}\n')
            file_handle.write(f'#define CONNECTION_BAUDRATE {connection_baudrate}\n')
            file_handle.write(f'#define CONNECTION_TIMEOUT {connection_timeout}\n\n')
            file_handle.write(f'//I/O Settings\n \n')

        if debug == True:
            
            print(f"MCU Alias: {alias}")
            print(f"Component Name: {component_name}")
            print(f"Device: {dev}")
            print(f"Enabled: {enabled}")
            print(f"Connection Type: {connection_type}")
            print(f"Connection Baudrate: {connection_baudrate}")
            print("IO Map:")

        io_map = mcu.get('io_map', {})

        
        analog_inputs = io_map.get('analogInputs', [])
        pwm_outputs = io_map.get('pwmOutputs', [])
        digital_inputs = io_map.get('digitalInputs', [])
        digital_outputs = io_map.get('digitalOutputs', [])
        lPoti = io_map.get('lPoti', [])
        binarySelectorSwitch = io_map.get('binarySelectorSwitch', [])
        quadratureEncoder = io_map.get('quadratureEncoder', [])
        joystick = io_map.get('joystick', [])
        statusled = io_map.get('statusled', [])
        digitalLed = io_map.get('digitalLed', [])
        matrixKeyboard = io_map.get('matrixKeyboard', [])
        LEDmultiplexing = io_map.get('LEDmultiplexing', [])
        dallasThermistor = io_map.get('dallasThermistor', [])
        rcServo = io_map.get('rcServo', [])
        Stepper = io_map.get('Stepper', [])

        #create an arrays with all Pins for communication
        allBitInPins = []
        allIntInPins = []
        allFloatPins = []

        allBitOutPins = []
        allIntOutPins = []
        allFloatOutPins = []



        ### Analog Inputs
        if analog_inputs:
            AInputs = 0
            for pin in analog_inputs:
                if pin.get('pin_enabled', True):
                    AInputs += 1

            if AInputs > 0:
                if debug == True:
                    print("Analog Inputs:")

                if writeFirmwareConfig == True:
                    file_handle.write(f'//Analog Inputs\n')
                    file_handle.write(f'#define AINPUTS\n')
                    file_handle.write(f'#define ANALOG_INPUTS {AInputs}\n')
                
                AInPinmap = []
                AInPinNames = []
                AInPinSmoothings = []
                AInPinMinValues = []
                AInPinMaxValues = []


                for pin in analog_inputs:
                    if pin.get('pin_enabled', True):
                        AInPinmap.append(pin.get('pin_id', pin))
                        AInPinNames.append(pin.get('pin_name', f"ain-{pin}"))
                        AInPinSmoothings.append(pin.get('pin_smoothing', 200))
                        AInPinMinValues.append(pin.get('pin_min_val', 0))
                        AInPinMaxValues.append(pin.get('pin_max_val', 255))
                        allIntInPins.append(allIntInPins[-1] + 1 if allIntInPins else 0)

                    if debug == True:
                        print(AInPinmap[-1])
                        print(AInPinNames[-1])
                        print(AInPinSmoothings[-1])
                        print(AInPinMinValues[-1])
                        print(AInPinMaxValues[-1])
                        print(allIntInPins[-1])

                if writeFirmwareConfig == True:
                    file_handle.write(f'    const int AInPinmap[] = {{{",".join(map(str, AInPinmap))}}};\n')
                    file_handle.write(f'    const int AInPinSmoothing[] = {{{",".join(map(str, AInPinSmoothings))}}};\n')
                    file_handle.write(f'    const int AInPinAdresses[] = {{{",".join(map(str, allIntInPins[-AInputs:]))}}};\n')
                    file_handle.write('\n')    


        ### PWM Outputs
        if pwm_outputs:
            
            PwmOutputs = 0
            for pin in pwm_outputs:
                if pin.get('pin_enabled', True):
                    PwmOutputs += 1

            if PwmOutputs > 0:
                if debug == True:
                    print("PWM Outputs:")
                if writeFirmwareConfig == True:
                    file_handle.write(f'//PWM Outputs\n')
                    file_handle.write(f'#define PWMOUTPUTS\n')
                    file_handle.write(f'#define PwmOutputs {PwmOutputs}\n')
                
                PwmOutPinmap = []
                PWMPinNames = []
                PWMPinInit = []
                PWMPinModes = []
                PWMPin_on_values = []
                PWMPin_off_values = []

                

                for pin in pwm_outputs:
                    if pin.get('pin_enabled', True):
                        PwmOutPinmap.append(pin.get('pin_id', pin))
                        PWMPinNames.append(pin.get('pin_name', f"pwm-{pin}"))
                        PWMPinInit.append(pin.get('pin_init_state', 0))
                        PWMPinModes.append(pin.get('pin_mode', 0))
                        PWMPin_on_values.append(pin.get('pin_on_value', 255))
                        PWMPin_off_values.append(pin.get('pin_off_value', 0))

                        if debug == True:
                            print(PwmOutPinmap[-1])
                            print(PWMPinNames[-1])
                            print(PWMPinInit[-1])
                            print(PWMPinModes[-1])
                            print(PWMPin_on_values[-1])
                            print(PWMPin_off_values[-1])
                        
                if writeFirmwareConfig == True:
                    file_handle.write(f'    const int PwmOutPinmap[] = {{{",".join(map(str, PwmOutPinmap))}}};\n')
                    file_handle.write(f'    const int PWMPinInit[] = {{{",".join(map(str, PWMPinInit))}}};\n')
                    file_handle.write(f'\n')

        ### Digital Inputs
        if digital_inputs:
            Inputs = 0	
            for pin in digital_inputs:
                if pin.get('pin_enabled', True):
                    Inputs += 1
            
            if Inputs > 0:
                if debug == True:
                    print("Digital Inputs:")
                if writeFirmwareConfig == True:
                    file_handle.write(f'//Digital Inputs\n')
                    file_handle.write(f'#define INPUTS\n')
                    file_handle.write(f'#define DigitalInputs {Inputs}\n')
            
                InPinmap = []
                InPinNames = []
                InPinModes = []
                InPinDebounce = []
                InPinPullups = []
                InPinInverteds = []

                

                for pin in digital_inputs:
                    if pin.get('pin_enabled', True):
                        InPinmap.append(pin.get('pin_id', pin))
                        InPinNames.append(pin.get('pin_name', f"din-{pin}"))
                        InPinModes.append(pin.get('pin_mode', 0))
                        InPinDebounce.append(pin.get('pin_debounce', 20))
                        InPinPullups.append(pin.get('pin_pullup', 1))
                        InPinInverteds.append(pin.get('pin_inverted', 0))
                        allBitInPins.append(allBitInPins[-1] + 1 if allBitInPins else 0)

                        if debug == True:
                            print(InPinmap[-1])
                            print(InPinNames[-1])
                            print(InPinModes[-1])
                            print(InPinDebounce[-1])
                            print(InPinPullups[-1])
                            print(InPinInverteds[-1])
                            print(allBitInPins[-1])
                        
                if writeFirmwareConfig == True:
                    file_handle.write(f'    const int InPinmap[] = {{{",".join(map(str, InPinmap))}}};\n')
                    file_handle.write(f'    const int InPinModes[] = {{{",".join(map(str, InPinModes))}}};\n')
                    file_handle.write(f'    const int InPinDebounce[] = {{{",".join(map(str, InPinDebounce))}}};\n')
                    file_handle.write(f'    const int InPinPullups[] = {{{",".join(map(str, InPinPullups))}}};\n')
                    file_handle.write(f'    const int InPinAdresses[] = {{{",".join(map(str, allBitInPins[-Inputs:]))}}};\n')
                    file_handle.write(f'\n')
            
        ### Digital Outputs
        if digital_outputs:
            Outputs = 0
            for pin in digital_outputs:
                if pin.get('pin_enabled', True):
                    Outputs += 1
            
            if Outputs > 0:
                if debug == True:
                    print("Digital Outputs:")
                if writeFirmwareConfig == True:
                    file_handle.write(f'//Digital Outputs\n')
                    file_handle.write(f'#define OUTPUTS\n')
                    file_handle.write(f'#define DigitalOutputs {Outputs}\n')
            
                OutPinmap = []
                OutPinNames = []
                OutPinTypes = []
                OutPinInit = []
                OutPinDisconnected_states = []
                OutPinConnected_states = []



                for pin in digital_outputs:
                    if pin.get('pin_enabled', True):
                        OutPinmap.append(pin.get('pin_id', pin))
                        OutPinNames.append(pin.get('pin_name', f"out-{pin}"))
                        OutPinInit.append(pin.get('pin_init_state', 0))
                        OutPinTypes.append(pin.get('pin_type', 0))
                        OutPinDisconnected_states.append(pin.get('pin_on_disconnected', 0))
                        OutPinConnected_states.append(pin.get('pin_on_connected', 0))           
                        allBitOutPins.append(allBitOutPins[-1] + 1 if allBitOutPins else 0)
                        
                    if debug == True:
                        print(OutPinmap[-1])
                        print(OutPinNames[-1])
                        print(OutPinTypes[-1])
                        print(OutPinInit[-1])
                        print(OutPinDisconnected_states[-1])
                        print(OutPinConnected_states[-1])
                        print(allBitOutPins[-1])   
                        
                if writeFirmwareConfig == True:
                    file_handle.write(f'    const int OutPinmap[] = {{{",".join(map(str, OutPinmap))}}};\n')
                    file_handle.write(f'    const int OutPinInit[] = {{{",".join(map(str, OutPinInit))}}};\n')
                    file_handle.write(f'    const int OutPinDisconnect[] = {{{",".join(map(str, OutPinDisconnected_states))}}};\n')
                    file_handle.write(f'    const int OutPinConnect[] = {{{",".join(map(str, OutPinConnected_states))}}};\n')
                    file_handle.write(f'    const int OutPinAdresses[] = {{{",".join(map(str, allBitOutPins[-Outputs:]))}}};\n')
                    file_handle.write(f'\n')

        ### Potentiometer
        if lPoti:
            LPotis = 0
            for pin in lPoti:
                if pin.get('pin_enabled', True):
                    LPotis += 1
            
            if LPotis > 0:
                if debug == True:
                    print("Latching Potentiometer:")
                if writeFirmwareConfig == True:
                    file_handle.write(f'//latching Poti\n')
                    file_handle.write(f'#define LPOTI\n')
                    file_handle.write(f'#define LinearPotis {LPotis}\n')
            
                LPotiPinmap = []
                LPotiPinNames = []
                LPotiPinLatches = []
                LPotiPinTypes = []
                LPotiPinValues = []
                LPotiPinMargins = []
                LPotiPinModes = []




                for pin in lPoti:
                    if pin.get('pin_enabled', True):
                        LPotiPinmap.append(pin.get('pin_id', pin))
                        LPotiPinNames.append(pin.get('pin_name', f"lpoti-{pin}"))
                        LPotiPinLatches.append(pin.get('pin_latch', 0))	
                        LPotiPinTypes.append(pin.get('pin_type', 0))
                        LPotiPinValues.append(pin.get('value_replace', 0))
                        LPotiPinMargins.append(pin.get('pin_margin', 20))
                        LPotiPinModes.append(pin.get('pin_mode', 0))
                        allBitInPins.append(allBitInPins[-1] + 1 if allBitInPins else 0)

                    
                        if debug == True:
                            print(LPotiPinmap[-1])
                            print(LPotiPinNames[-1])
                            print(LPotiPinLatches[-1])
                            print(LPotiPinTypes[-1])
                            print(LPotiPinValues[-1])
                            print(LPotiPinMargins[-1])
                            print(LPotiPinModes[-1])
                            print(allBitInPins[-1])
                        
                if writeFirmwareConfig == True:
                    file_handle.write(f'    const int LPotiPinmap[] = {{{",".join(map(str, LPotiPinmap))}}};\n')
                    file_handle.write(f'    const int LPotiPinLatches[] = {{{",".join(map(str, LPotiPinLatches))}}};\n')
                    file_handle.write(f'    const int LPotiPinMargins[] = {{{",".join(map(str, LPotiPinMargins))}}};\n')
                    file_handle.write(f'    const int LPotiPinAdresses[] = {{{",".join(map(str, allBitInPins[-LPotis:]))}}};\n')
                    
                    file_handle.write(f'\n')

        ### Binary Selector Switch
        if binarySelectorSwitch:
            BSS = 0
            for pin in binarySelectorSwitch:
                if pin.get('pin_enabled', True):
                    BSS += 1
            
            if BSS > 0:
                if debug == True:
                    print("Binary Selector Switch:")
                if writeFirmwareConfig == True:
                    file_handle.write(f'//Binary Selector Switch\n')
                    file_handle.write(f'#define BINSEL\n')
                    file_handle.write(f'#define BinarySelectorSwitches {BSS}\n')
            
                BSSPinmap = []
                BSSPinNames = []
                BSSPinPins = []
                BSSPinTypes = []
                BSSPinValues = []


                for pin in binarySelectorSwitch:
                    if pin.get('pin_enabled', True):
                        BSSPinmap.append(pin.get('pin_id', pin))
                        BSSPinNames.append(pin.get('pin_name', f"bss-{pin}"))
                        BSSPinPins.extend(pin.get('pin_pins', []))
                        BSSPinTypes.append(pin.get('pin_type', 0))
                        BSSPinValues.append(pin.get('pin_value', 0))
                        for _ in range(len(BSSPinPins)):
                            allBitInPins.append(allBitInPins[-1] + 1 if allBitInPins else 0)
                        if debug == True:
                            print(BSSPinmap[-1])
                            print(BSSPinNames[-1])
                            print(BSSPinPins[0])
                            print(BSSPinTypes[-1])
                            print(BSSPinValues[-1])
                            print(allBitInPins[-1])
                        
                if writeFirmwareConfig == True:
                    file_handle.write('    const int BSSPinmap[] = {')
                    for i in range(len(BSSPinPins)):
                        file_handle.write(f'{BSSPinPins[i]}')
                        if i < len(BSSPinPins) - 1:
                            file_handle.write(',')
                    file_handle.write('};\n')
                    file_handle.write('    const int BSSPinAdresses[] = {')
                    for i in range(len(BSSPinPins)):
                        allBitInPins.append(allBitInPins[-1] + 1 if allBitInPins else 0)
                        file_handle.write(f'{allBitInPins[-1]}')
                        if i < len(BSSPinPins) - 1:
                            file_handle.write(',')
                    file_handle.write('};\n')
                
                    
                    file_handle.write(f'\n')


        ### Quadrature Encoder
        if quadratureEncoder:
            
            QE = 0
            for pin in quadratureEncoder:
                if pin.get('pin_enabled', True):
                    QE += 1

            if QE > 0:
                if debug == True:
                    print("Quadrature Encoder:")
                if writeFirmwareConfig == True:
                    file_handle.write(f'//Quadrature Encoder\n')
                    file_handle.write(f'#define QUADENC\n')
                    file_handle.write(f'#define QuadratureEncoders {QE}\n')
            
                QEPinmap = []
                QEPinNames = []
                QEPinModes = []
                QEPinPins = []
                QEPin_steps = []
                QEPinvirtualpins = []
                QEPinVirtualStartPins = []
                QEPinTypes = []
                QEPinValues = []



                for pin in quadratureEncoder:
                    if pin.get('pin_enabled', True):
                        QEPinmap.append(pin.get('pin_id', pin))
                        QEPinNames.append(pin.get('pin_name', f"quadEnc.{pin}"))
                        QEPinModes.append(pin.get('pin_mode', 0))
                        QEPinPins.append(pin.get('pin_pins', 0))
                        QEPin_steps.append(pin.get('pin_steps', 4))
                        QEPinvirtualpins.append(pin.get('pin_virtualpins', 0))
                        QEPinVirtualStartPins.append(pin.get('pin_virtualstartpins', 0))
                        QEPinTypes.append(pin.get('pin_type', 0))
                        QEPinValues.append(pin.get('pin_value', 0))

                if writeFirmwareConfig == True:
                    file_handle.write(f'    const int QEPinmap[] = {{{",".join(map(str, QEPinmap))}}};\n')
                    file_handle.write(f'    const int QEPinModes[] = {{{",".join(map(str, QEPinModes))}}};\n')
                    file_handle.write(f'    const int QEPinPins[] = {{{",".join(map(str, QEPinPins))}}};\n')
                    file_handle.write(f'    const int QEPinSteps[] = {{{",".join(map(str, QEPin_steps))}}};\n')
                    file_handle.write(f'\n')

        ### Joystick
        if joystick:
            JS = 0
            for pin in joystick:
                if pin.get('pin_enabled', True):
                    JS += 1

            if JS > 0:
                
                if debug == True:
                    print("Joystick:")
                if writeFirmwareConfig == True:
                    file_handle.write(f'//Joystick\n')
                    file_handle.write(f'#define JOYSTICK\n')
                    file_handle.write(f'#define Joysticks {JS}\n')
            
                JSPinmap = []
                JSPinNames = []
                JSPinCenter = []
                JSPinDeadbands = []
                JSPinScaling = []
                    

                for pin in joystick:
                    if pin.get('pin_enabled', True):
                        JSPinmap.append(pin.get('pin_id', pin))
                        JSPinNames.append(pin.get('pin_name', f"joystick-{pin}"))
                        JSPinCenter.append(pin.get('pin_center', 512))
                        JSPinDeadbands.append(pin.get('pin_deadband', 20))
                        JSPinScaling.append(pin.get('pin_scaling', 0.01))
                        allIntInPins.append(allIntInPins[-1] + 1 if allIntInPins else 0)

                        if debug == True:
                            print(JSPinmap[-1])
                            print(JSPinNames[-1])
                            print(JSPinCenter[-1])
                            print(JSPinDeadbands[-1])
                            print(JSPinScaling[-1])
                            print(allIntInPins[-1])

                    if writeFirmwareConfig == True:
                        file_handle.write(f'    const int JSPinmap[] = {{{",".join(map(str, JSPinmap))}}};\n')
                        file_handle.write(f'    const int JSCenter[] = {{{",".join(map(str, JSPinCenter))}}};\n')
                        file_handle.write(f'    const int JSDeadband[] = {{{",".join(map(str, JSPinDeadbands))}}};\n')
                        file_handle.write(f'    const float JSScaling[] = {{{",".join(map(str, JSPinScaling))}}};\n')
                        file_handle.write(f'    const int JSPinAdresses[] = {{{",".join(map(str, allIntInPins[-JS:]))}}};\n')
                        file_handle.write(f'\n')

             
        ### Status LED
        if statusled:
            if debug == True:
                print("Status LED:")
            SL = (len(statusled))
            if SL > 0:
                if writeFirmwareConfig == True:
                    file_handle.write(f'//Status LED\n')
                    file_handle.write(f'#define STATUSLED\n')

            for pin in statusled:
                StatusLed = pin.get('pin_id', 13)
                StatusLedDled = pin.get('useDled', 0)
                
                if debug == True:
                    print(StatusLed)
                    print(StatusLedDled)

                if writeFirmwareConfig == True:
                    file_handle.write(f'    const int StatusLed = {StatusLed};\n')
                    file_handle.write(f'    int StatLedErrDel[] = {{1000,10}};   //Blink Timing for Status LED Error (no connection)\n')
                    file_handle.write(f'    const int UseDLedStatusLed = {StatusLedDled};\n')
                    file_handle.write(f'\n')


        ### Digital LED
        if digitalLed:
            
            DLed = 0
            for pin in digitalLed:
                if pin.get('pin_enabled', True):
                    DLed += 1
                    
            if DLed > 0:
                if debug == True:
                    print("Digital LED:")
                if writeFirmwareConfig == True:
                    file_handle.write(f'#define DIGITALLEDS\n')
                
                
                DLedPin = []
                DLedPinNames = []

                DLedIds = []
                DLedNames = []
                DLedInits = []
                DLedModes = []
                DLed_on_values = []
                DLed_off_values = []
                DLed_Fades = []


                Dled_Groupcounter = 0


                for pin in digitalLed:
                    if pin.get('pin_enabled', True):
                        DLedPin = pin.get('pin_id', pin)
                        DLedStandardName = pin.get('Dled_name', f"dled-{pin}")
                        DLedStandardOnColor = pin.get('Dled_on_color', [255, 255, 255])
                        DLedStandardOffColor = pin.get('Dled_off_color', [0, 0, 0])
                        DLedStandardFade = pin.get('Dled_fade', 0)
                        DLedStandardMode = pin.get('Dled_mode', 0)
                        DLedStandardInit = pin.get('Dled_init_state', 0)
                        DledBrightness = pin.get('Dled_brightness', 70)
                        DledChainLength = 0

                        for dled in pin.get('Dleds', []):
                            if 'Dled_group' in dled:
                                dled_group = dled['Dled_group']
                                start_id = dled_group.get('Dled_group_start_id', 0)
                                end_id = dled_group.get('Dled_group_end_id', 0)
                                Group_name = dled_group.get('Dled_name', f'{DLedStandardName}_group_{Dled_Groupcounter}')
                                Group_OnColor = dled_group.get('Dled_on_color', DLedStandardOnColor)
                                Group_OffColor = dled_group.get('Dled_off_color', DLedStandardOffColor)
                                Group_mode = dled_group.get('Dled_mode', DLedStandardMode)
                                Group_fade = dled_group.get('Dled_fade', DLedStandardFade)
                                Group_inits = dled_group.get('Dled_init_state', DLedStandardInit)

                                Dled_Groupcounter += 1
                                DLedIds.append(start_id)
                                DLedNames.append(f"{Group_name}")
                                DLedInits.append(Group_inits)
                                DLedModes.append(Group_mode)
                                DLed_on_values.append(Group_OnColor)
                                DLed_off_values.append(Group_OffColor)
                                DLed_Fades.append(Group_fade)

                                if end_id > DledChainLength:
                                    DledChainLength = end_id
                            else:
                                DLedIds.append(dled.get('Dled_id', 0))
                                DLedNames.append(dled.get('Dled_name', f"{DLedStandardName}-{dled.get('Dled_id')}"))
                                DLedInits.append(dled.get('Dled_init_state', DLedStandardInit))
                                DLedModes.append(dled.get('Dled_mode', DLedStandardMode))
                                DLed_on_values.append(dled.get('Dled_on_color', DLedStandardOnColor))
                                DLed_off_values.append(dled.get('Dled_off_color', DLedStandardOffColor))
                                DLed_Fades.append(dled.get('Dled_fade', DLedStandardFade))

                                if DLedIds[-1] > DledChainLength:
                                    DledChainLength = DLedIds[-1]
                                
                    
                    # Create a list of tuples containing all the data
                    dled_data = list(zip(DLedIds, DLedNames, DLedInits, DLedModes, DLed_on_values, DLed_off_values, DLed_Fades))
                    
                    # Sort the list of tuples by the first element (DLedIds)
                    dled_data.sort(key=lambda x: x[0])
                    
                    max_id = dled_data[-1][0]
                    complete_dled_data = []
                    existing_ids = {entry[0] for entry in dled_data}
                    
                    for i in range(max_id + 1):
                        if i in existing_ids:
                            complete_dled_data.append(dled_data.pop(0))
                        else:
                            complete_dled_data.append((i, f'{DLedStandardName}-{i}', 0, 0, [0, 0, 0], [0, 0, 0], 0))

                    # Unzip the sorted list of tuples back into individual lists
                    DLedIds, DLedNames, DLedInits, DLedModes, DLed_on_values, DLed_off_values, DLed_Fades = zip(*complete_dled_data)
                    
                    # Convert tuples back to lists
                    DLedIds = list(DLedIds)
                    DLedNames = list(DLedNames)
                    DLedInits = list(DLedInits)
                    DLedModes = list(DLedModes)
                    DLed_on_values = list(DLed_on_values)
                    DLed_off_values = list(DLed_off_values)
                    DLed_Fades = list(DLed_Fades)

                    Dled_Adresses = []
                    for i in range(len(DLedIds)):
                        Dled_Adresses.append(allBitOutPins[-1] + i + 1)
                    allBitOutPins.extend(Dled_Adresses)

                    if debug:
                        print(f"Dled Pin: {DLedPin}")
                        print(f"DLed Names: {DLedNames}")
                        print(f"DLed Ids: {DLedIds}")
                        print(f"DLed Inits: {DLedInits}")
                        print(f"DLed Modes: {DLedModes}")
                        print(f"DLed On Values: {DLed_on_values}")
                        print(f"DLed Off Values: {DLed_off_values}")
                        print(f"DLed Fades: {DLed_Fades}")
                        print(f"DLed Adresses: {Dled_Adresses}")
                        print(f"chain length: {DledChainLength}")
                    


                    if writeFirmwareConfig:
                        file_handle.write(f'    const int DLedPin = {DLedPin};\n')
                        file_handle.write(f'    const int DledBrightness = {DledBrightness};\n')
                        file_handle.write(f'    const int DLedInits[{DLedIds[-1]+1}] = {{{",".join(map(str, DLedInits))}}};\n')
                        file_handle.write(f'    const int DLedPinModes[{DLedIds[-1]+1}] = {{{",".join(map(str, DLedModes))}}};\n')
                        
                        DLed_on_values_str = ",".join(map(str, DLed_on_values)).replace('[', '{').replace(']', '}')
                        file_handle.write(f'    const int DLedPin_on_values[{DLedIds[-1]+1}][3] = {{{DLed_on_values_str}}};\n')
                        DLed_off_values_str = ",".join(map(str, DLed_off_values)).replace('[', '{').replace(']', '}')
                        file_handle.write(f'    const int DLedPin_off_values[{DLedIds[-1]+1}][3] = {{{DLed_off_values_str}}};\n')
                        
                        file_handle.write(f'    const int DLedPin_Fades[{DLedIds[-1]+1}] = {{{",".join(map(str, DLed_Fades))}}};\n')
                        file_handle.write(f'    const int DLedAdresses[{DLedIds[-1]+1}] = {{{",".join(map(str, Dled_Adresses))}}};\n')
                        file_handle.write(f'    const int DLedChainLength = {DledChainLength};\n')
                        file_handle.write(f'\n')

           
        ### Matrix Keyboard





        ### Dallas Thermistor
        

    if file_handle:
        file_handle.close()

    


if __name__ == "__main__":

    config_path = "config.yaml"
    configs = load_config(config_path)
    print(configs)
    for config in configs:
        process_config(configs,1)